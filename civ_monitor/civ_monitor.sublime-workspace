{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"FundV",
				"FundVolumeDataAdmin"
			],
			[
				"Fun",
				"FundVolumeData"
			],
			[
				"Fund",
				"FundOfficer"
			],
			[
				"Off",
				"OfficerDirectorAdmin"
			],
			[
				"IssuerOf",
				"IssuerOfficerInline"
			],
			[
				"Mod",
				"ModelAdmin"
			],
			[
				"core_",
				"core_fund"
			],
			[
				"Service",
				"ServiceManager"
			],
			[
				"dict",
				"dictfetchall"
			],
			[
				"Officer",
				"OfficerDirector"
			],
			[
				"country",
				"country_id"
			],
			[
				"add",
				"address_2"
			],
			[
				"Servic",
				"ServiceManager"
			],
			[
				"fi",
				"fields"
			],
			[
				"model",
				"model_utils"
			],
			[
				"mt",
				"mtext	TextField (mtext)"
			],
			[
				"T",
				"True"
			],
			[
				"re",
				"register"
			],
			[
				"Mo",
				"ModelAdmin"
			],
			[
				"fund",
				"fund_scheme"
			],
			[
				"Leg",
				"LegalStatus"
			],
			[
				"core_fund",
				"core_fundclassification"
			],
			[
				"core",
				"core_issuer"
			],
			[
				"mx",
				"max_length"
			],
			[
				"Le",
				"LegalStatus"
			],
			[
				"me",
				"Meta"
			],
			[
				"stau",
				"status"
			],
			[
				"mb",
				"mnullbool	NullBooleanField (mnullbool)"
			],
			[
				"Coun",
				"CountryField"
			],
			[
				"C",
				"Currency"
			],
			[
				"Currency",
				"CurrencyAdmin"
			],
			[
				"data",
				"data_collection_period"
			],
			[
				"if",
				"ifmain	if __name__ == '__main__'"
			],
			[
				"publ",
				"publication_date_id"
			],
			[
				"date",
				"date_stamp"
			],
			[
				"mi",
				"mint	IntegerField (mint)"
			],
			[
				"update",
				"update_index"
			],
			[
				"query",
				"get_queryset"
			],
			[
				"Ar",
				"ArticlDetailView"
			],
			[
				"db",
				"db_name"
			],
			[
				"dump",
				"dump_loc"
			],
			[
				"dump_",
				"dump_path"
			],
			[
				"Object",
				"ObjectDoesNotExist"
			],
			[
				"dest",
				"dest_dir"
			],
			[
				"source",
				"source_dir"
			],
			[
				"virtual",
				"virtualenvs"
			],
			[
				"mode",
				"mode_sudo"
			],
			[
				"cre",
				"create_hosting_dir"
			],
			[
				"python",
				"python-pip"
			],
			[
				"N",
				"None"
			],
			[
				"public",
				"public_gateway_ip"
			],
			[
				"supervisor",
				"supervisorctl"
			],
			[
				"package",
				"package_ensure"
			],
			[
				"in",
				"include"
			],
			[
				"i",
				"ipdb	ipdb debug tool"
			],
			[
				"Wor",
				"WorkShopAdmin"
			],
			[
				"Work",
				"WorkShopImage"
			],
			[
				"temp",
				"tempfile"
			],
			[
				"summary",
				"summary_html"
			],
			[
				"Sec",
				"SectionLListView"
			]
		]
	},
	"buffers":
	[
		{
			"file": "apps/funds/models/funds.py",
			"settings":
			{
				"buffer_size": 3597,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from django.db import models\nfrom .funds import Fund, Issuer\nfrom publications.models import Monthly\nfrom django.contrib.auth.models import User\nfrom model_utils.models import TimeStampedModel\n\n\n\nclass VolumeReportSubmission(TimeStampedModel):\n\n    issuer = models.ForeignKey(Issuer)\n    uploaded_by = models.ForeignKey(User, null=True, editable=False)\n    filepath = models.FileField(\n        upload_to='data/%Y/%b',\n        verbose_name='Upload Volume Report File',\n        help_text=('Browse your computer to select a the '\n                   'Excel file with the volume report submission:'\n                   )\n    )\n\n    data_period = models.ForeignKey(\n        Monthly,\n        limit_choices_to={'dateix__gte': '2007-12-31'}\n    )\n\n    def __unicode__(self):\n        return  '%s - %s' % (\n            self.issuer,\n            self.data_period.dateix.strftime('%Y-%b')\n        )\n\n    def get_absolute_url(self):\n        return \"data/submission/%s\" % (self.id)\n\n    def get_url(self):\n        return '<a href=\"%s\">%s</a>' % (self.filepath.url, \"View XL File\")\n    get_url.allow_tags = True\n    get_url.short_description = 'Submission'\n\n    def get_last_log(self):\n\n        ll = LoaderLog.objects.all().filter(\n            submission__id=self.id\n        ).order_by(\n            '-updated'\n        )[0]\n        return ll\n\n    def show_last_log(self):\n        try:\n            ll = LoaderLog.objects.all(\n            ).filter(\n                submission__id=self.id).order_by('-updated')[0]\n            return '<a href=\"/admin/datasub/log_detail/%s/\"><img src=\"/site_media/images/view.png\" />&nbsp;View</a>' % ll.id\n        except IndexError:\n            return \"\"\n    show_last_log.allow_tags = True\n    show_last_log.short_description = 'View Log'\n\n    class Meta:\n        verbose_name = 'Volume Report Submission'\n        verbose_name_plural = 'Upload Volume Report Submission'\n        app_label = 'funds'\n\n\nclass FundVolumeData(TimeStampedModel):\n\n    fund = models.ForeignKey(Fund, related_name='volumedata')\n    user = models.ForeignKey(User, blank=True, null=True, editable=False)\n\n    period_ending = models.ForeignKey(\n        Monthly,\n        verbose_name=\"Reporting Period\",\n        limit_choices_to={'dateix__gte': '2006-12-31'}\n    )\n    units_purchased_individuals = models.FloatField(\n        \"Individuals\",\n        blank=True,\n        null=True\n    )\n    units_purchased_institutions = models.FloatField(\n        \"Instutions\",\n        blank=True,\n        null=True\n    )\n    units_sold_agents = models.FloatField(\n        verbose_name=\"Agents\",\n        blank=True,\n        null=True\n    )\n\n    units_sold_inhouse = models.FloatField(\n        verbose_name=\"In House\",\n        blank=True,\n        null=True\n    )\n\n    units_redeemed_individuals = models.FloatField(\n        verbose_name=\"Individuals\",\n        blank=True,\n        null=True\n    )\n\n    units_redeemed_institutions = models.FloatField(\n        verbose_name=\"Institutions\",\n        blank=True,\n        null=True)\n\n    total_units_issued_outstanding = models.FloatField(\n        verbose_name=\"Units Issued/Outstanding\",\n        blank=True,\n        null=True\n    )\n\n    total_unit_holders = models.FloatField(\n        verbose_name=\"No. Unit holders\",\n        blank=True,\n        null=True\n    )\n\n    value_units_purchased_individuals = models.DecimalField(\n        verbose_name=\"Purchased by Individuals\",\n        max_digits=12,\n        decimal_places=2,\n        blank=True,\n        null=True\n    )\n\n    value_units_purchased_institutions = models.DecimalField(\n        verbose_name=\"Purchased by Institutions\",\n        max_digits=12,\n        decimal_places=2,\n        null=True, blank=True\n    )\n    value_unit_sales_agents = models.DecimalField(\n        verbose_name=\"Sales by Agents\",\n        max_digits=12,\n        decimal_places=2,\n        null=True,\n        blank=True\n    )\n\n    value_unit_sales_inhouse = models.DecimalField(\n        verbose_name=\"Sales In House\",\n        max_digits=12,\n        decimal_places=2,\n        null=True,\n        blank=True\n    )\n\n    value_redeemed_individuals = models.DecimalField(\n        verbose_name=\"Redeemed by individuals\",\n        max_digits=12,\n        decimal_places=2,\n        null=True,\n        blank=True\n    )\n\n    value_redeemed_institutions = models.DecimalField(\n        verbose_name=\"Redeemed by Individuals\",\n        max_digits=12,\n        decimal_places=2,\n        null=True,\n        blank=True\n    )\n\n    total_net_assets_under_management = models.DecimalField(\n        max_digits=12,\n        decimal_places=2,\n        blank=True,\n        null=True\n    )\n\n    tt_value_units_purchased_individuals = models.FloatField(\n        verbose_name=\"TT Purchased by Individuals\",\n        blank=True, null=True\n    )\n    tt_value_units_purchased_institutions = models.DecimalField(\n        verbose_name=\"TT Purchased by Institutions\",\n        null=True,\n        blank=True\n    )\n    tt_value_unit_sales_agents = models.DecimalField(\n        verbose_name=\"TT Sales by Agents\",\n        null=True,\n        blank=True\n    )\n    tt_value_unit_sales_inhouse = models.DecimalField(\n        verbose_name=\"TT Sales In House\",\n        null=True,\n        blank=True\n    )\n    tt_value_redeemed_individuals = models.DecimalField(\n        verbose_name=\"TT Redeemed by Individuals\",\n        null=True,\n        blank=True\n    )\n    tt_value_redeemed_institutions = models.DecimalField(\n        verbose_name=\"TT Redeemed by Institutions\",\n        max_digits=12,\n        decimal_places=2,\n        null=True, blank=True\n    )\n    tt_total_net_assets_under_management = models.FloatField(\n        null=True,\n        blank=True\n    )\n\n    unit_net_asset_value = models.FloatField(\n        verbose_name=\"Unit NAV\",\n        null=True,\n        blank=True\n    )\n\n    tt_value_units_purchased_individuals = models.FloatField(\n        null=True,\n        default=0.0,\n        blank=True\n    )\n    tt_value_units_purchased_institutions = models.FloatField(\n        null=True,\n        default=0.0,\n        blank=True\n    )\n    tt_value_unit_sales_agents = models.FloatField(null=True,\n                                                   default=0.0,\n                                                   blank=True\n                                                   )\n    tt_value_unit_sales_inhouse = models.FloatField(null=True,\n                                                    default=0.0,\n                                                    blank=True\n                                                    )\n    tt_value_redeemed_individuals = models.FloatField(null=True,\n                                                      default=0.0,\n                                                      blank=True\n                                                      )\n    tt_value_redeemed_institutions = models.FloatField(null=True,\n                                                       default=0.0,\n                                                       blank=True\n                                                       )\n    tt_value_redemptions = models.FloatField(\n        verbose_name=\"Redemptions ($TT)\",\n        null=True,\n        default=0.0,\n        blank=True\n    )\n\n    tt_value_sales = models.FloatField(\n        verbose_name=\"Sales ($TT)\",\n        null=True,\n        default=0.0,\n        blank=True\n    )\n\n    tt_total_net_assets_under_management = models.FloatField(\n        verbose_name=\"Assets Under Management ($TT)\",\n        null=True,\n        default=0.0,\n        blank=True\n    )\n\n    total_units_sold = models.FloatField(\n        verbose_name=\"No. Units Sold\",\n        null=True,\n        default=0.0,\n        blank=True\n    )\n\n    total_units_redeemed = models.FloatField(\n        verbose_name=\"No, Units Reedeemd\",\n        null=True,\n        default=0.0,\n        blank=True\n    )\n\n    is_estimated = models.NullBooleanField(\n        verbose_name='Values Have been Estimated',\n        blank=True,\n        default=False\n    )\n\n    is_valid = models.NullBooleanField(\n        verbose_name='Values Checked and Passed',\n        blank=True,\n        default=False\n    )\n\n    class Meta:\n        verbose_name_plural = \"Volume Data\"\n        order_with_respect_to = 'period_ending'\n        unique_together = ('fund', 'period_ending')\n        app_label = 'funds'\n\n    def __unicode__(self):\n        return \"%s-%s\" % (self.fund, self.period_ending)\n",
			"file": "apps/funds/models/fund_data.py",
			"file_size": 8348,
			"file_write_time": 1360917770000000,
			"settings":
			{
				"buffer_size": 8350,
				"line_ending": "Unix"
			}
		},
		{
			"file": "apps/funds/models/fund_management.py",
			"settings":
			{
				"buffer_size": 4012,
				"line_ending": "Unix"
			}
		},
		{
			"file": "apps/funds/models/__init__.py",
			"settings":
			{
				"buffer_size": 77,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from django.contrib import admin\nfrom .models import (InternationalClassification, LegalStatus,\n                     FundScheme, Issuer, Fund, ActiveStatus,\n                     FundServiceManager, OfficerDirector,\n                     ServiceManager, FundOfficer, IssuerOfficer,\n                     VolumeReportSubmission, FundVolumeData\n                     )\n\nfrom django.contrib.admin import SimpleListFilter\nfrom django.contrib.humanize.templatetags.humanize import intcomma\n\nclass InternationalClassificationAdmin(admin.ModelAdmin):\n    pass\n\n\nclass OfficerDirectorAdmin(admin.ModelAdmin):\n    list_display = ('first_name', 'last_name', 'telephone', 'email',)\n    search_fields = ('first_name', 'last_name', 'email',)\n\n\nclass ServiceManagerAdmin(admin.ModelAdmin):\n    list_display = ['name', 'country', ]\n    search_fields = ['name', 'country', ]\n\n\nclass FundServiceManagerInline(admin.TabularInline):\n    model = FundServiceManager\n    extra = 3\n\n\nclass FundOfficerInLine(admin.TabularInline):\n    model = FundOfficer\n    extra = 3\n\n\nclass IssuerOfficerInline(admin.TabularInline):\n    model = IssuerOfficer\n    extra = 3\n\n\nclass FundServiceManagerAdmin(admin.ModelAdmin):\n    list_display = ('fund', 'position', 'active',)\n    search_fields = ('position', 'fund',)\n\n\nclass IssuerAdmin(admin.ModelAdmin):\n\n    list_display = ('name', 'symbol', 'fund_count', 'show_funds')\n    list_filter = ('is_local_entity',)\n    search_fields = ('symbol', 'name',)\n    fieldsets = (\n        (None, {'fields': ('name', 'symbol', 'is_local_entity',\n                'address_1', 'address_2', 'country', 'fax', 'telephone')\n                }\n         ),\n        ('Optional Data', {'fields': ('email', 'website'),\n                           'classes': ('collapse',)\n                           }\n         ),\n    )\n\n    inlines = [\n        IssuerOfficerInline\n    ]\n\n    def fund_count(self, obj):\n        return obj.funds.count()\n    fund_count.short_description = 'No. Funds'\n\n    def show_funds(self, obj):\n        tmpl = (\n            '<div class=\"link-tools\">'\n            '<a href=\"/admin/core/fund/?issuer__id__exact=%s\" class=\"golink\">'\n            'Show Funds</a>'\n            '</div>'\n        )\n        return tmpl % (obj.id)\n\n    show_funds.allow_tags = True\n    show_funds.short_description = ''\n\n\nclass LocalCurrencyFilter(SimpleListFilter):\n    title = 'currency denomination'\n\n    parameter_name = 'currency'\n\n    def lookups(self, request, model_admin):\n\n        return (\n            ('local', 'Local currency'),\n            ('foreign', 'Foreign currency')\n        )\n\n    def queryset(self, request, queryset):\n        if self.value() == 'local':\n            return queryset.filter(currency__code='TTD')\n        if self.value() == 'foreign':\n            return queryset.exclude(currency__code='TTD')\n\n\nclass FundAdmin(admin.ModelAdmin):\n    list_display = (\n        'symbol',\n        'description',\n        'current_activity_status',\n        'issuer',\n        'last_data_submission',\n        'show_volume_reports'\n    )\n\n    list_filter = ('fund_scheme', 'issuer', LocalCurrencyFilter)\n\n    search_fields = (\n        'issuer__name', 'issuer__symbol', 'symbol',\n        'description',\n    )\n\n    ordering = ['symbol']\n\n    def current_activity_status(self, obj):\n        return obj.get_activity_status()\n\n    current_activity_status.short_description = 'Active'\n    current_activity_status.boolean = True\n\n    def show_volume_reports(self, obj):\n        tmpl = (\n            '<div class=\"link-tools\">'\n            '<a href=\"/admin/funds/fundvolumedata/?fund__id__exact=%s\" '\n            'class=\"golink\">'\n            'Show Volume Reports</a>'\n            '</div>'\n        )\n\n        return tmpl % (obj.id)\n\n    show_volume_reports.allow_tags = True\n    show_volume_reports.short_description = ''\n\n    def last_data_submission(self, obj):\n        try:\n            obs = obj.volumedata.all().order_by('-period_ending')[0]\n            return \"{} [by {} on {}] )\".format(\n                    obs.period_ending.dateix.strftime('%Y-%m'),\n                    obs.user,\n                    obs.modified.strftime('%Y-%m-%d: %H')\n\n                    )\n        except IndexError:\n            return '-'\n\n    last_data_submission.short_description = 'last Submission'\n\n    def last_net_assets(self, obj):\n        return '-'\n        # pd=last_valid_pubdate()\n        # try:\n        #     vd=self.fundvolumedata_set.filter(\n        #         period_ending__dateix__lte=pd.dateix).order_by('-period_ending')[0]\n        #     return vd.tt_total_net_assets_under_management\n        # except IndexError:\n        #     return None\n\n    def last_nav(self, obj):\n        return '-'\n        # pd=last_valid_pubdate()\n        # try:\n        #     vd=self.fundvolumedata_set.filter(\n        #         period_ending__dateix__lte=pd.dateix).order_by('-period_ending')[0]\n        #     vd=self.fundvolumedata_set.all().order_by('-period_ending')[0]\n        #     return vd.unit_net_asset_value\n        # except IndexError:\n        #     return None\n\n    inlines = [\n        FundServiceManagerInline,\n        FundOfficerInLine\n    ]\n\n\nclass FundVolumeDataAdmin(admin.ModelAdmin):\n\n\n    list_display = [\n        'get_fund_symbol',\n        'period_ending',\n        'tt_net_assets_under_man_fmt',\n        'tt_value_sales_fmt',\n        'tt_value_redemptions_fmt',\n        'unit_net_asset_value',\n    ]\n\n    search_fields = ['fund__symbol','fund__issuer__symbol',\n                     'fund__issuer__name',\n                     'period_ending__dateix']\n    fieldsets = (\n        (None, {'fields': (\n            'fund',\n            'period_ending'\n            )}\n        ),\n        ('Volume Data:', {\n                'classes':('wide','extrapretty'),\n                'fields':(\n                    'total_units_sold',\n                    'total_units_redeemed',\n                    'total_units_issued_outstanding',\n                    'total_unit_holders',\n                    'tt_value_redemptions',\n                    'tt_value_sales',\n                    'unit_net_asset_value',\n                    'tt_total_net_assets_under_management',\n                    'is_estimated',\n                    'is_valid'\n                ),\n            }\n        )\n    )\n\n    def get_fund_symbol(self, obj):\n        return obj.fund.symbol\n\n    get_fund_symbol.short_description = 'Fund'\n\n    def tt_net_assets_under_man_fmt(self, obj):\n        return '-' if obj is None else intcomma(\n            round(obj.tt_total_net_assets_under_management,2)\n        )\n    tt_net_assets_under_man_fmt.short_description='Assets Under Management'\n\n    def tt_value_sales_fmt(self, obj):\n        return '-' if obj is None else intcomma(\n            round(obj.tt_value_sales,2)\n        )\n    tt_value_sales_fmt.short_description='Sales'\n\n    def tt_value_redemptions_fmt(self, obj):\n        return '-' if obj is None else intcomma(\n            round(obj.tt_value_redemptions,2)\n        )\n    tt_value_redemptions_fmt.short_description='Redemptions'\n\n    def save_model(self, request, obj, form, change):\n        obj.user = request.user\n        obj.save()\n\n\nadmin.site.register(InternationalClassification,\n                    InternationalClassificationAdmin)\nadmin.site.register(Issuer, IssuerAdmin)\nadmin.site.register(Fund, FundAdmin)\nadmin.site.register(OfficerDirector, OfficerDirectorAdmin)\nadmin.site.register(ServiceManager, ServiceManagerAdmin)\nadmin.site.register(FundVolumeData, FundVolumeDataAdmin)\n\n",
			"file": "apps/funds/admin.py",
			"file_size": 7454,
			"file_write_time": 1360939136000000,
			"settings":
			{
				"buffer_size": 7455,
				"line_ending": "Unix"
			}
		},
		{
			"file": "settings/local.py",
			"settings":
			{
				"buffer_size": 1762,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/christopherclarke/Dropbox/Development/civ_monitor_legacy/datasub/loader.py",
			"settings":
			{
				"buffer_size": 6842,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/christopherclarke/Dropbox/Development/civ_monitor_legacy/core/models.py",
			"settings":
			{
				"buffer_size": 40979,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"pac",
				"Package Control: Remove Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: List Packages"
			],
			[
				"Ins",
				"Package Control: Install Package"
			],
			[
				"p",
				"Package Control: Upgrade Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"pep",
				"User: Python PEP8 Autoformat"
			],
			[
				"Pack",
				"Package Control: List Packages"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Discover Packages"
			],
			[
				"i",
				"Package Control: Install Package"
			],
			[
				"rst",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 460.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/funds/models/__init__.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/funds/scripts/migrate_fund_people.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor_legacy/core/admin.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor_legacy/core/models.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/funds/admin.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/settings/base.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/urls.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/settings/local.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/menu.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/dashboard.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/static/admin_tools/css/theming.css",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/requirements/_base.txt",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/publications/scripts/migrate_periods.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/publications/scripts/migrate_pubdata.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/publications/admin.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/funds/scripts/migrate_basic_fund_data.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/funds/scripts/funds.sql",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/funds/funds.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/utils/scripts/migrate_currency.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/utils/admin.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/utils/models.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/publications/models.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/settings/dev_chris.py",
		"/Users/christopherclarke/Dropbox/Development/pinax-theme-foundation/pinax_theme_foundation/templates/_account_bar.html",
		"/Users/christopherclarke/Dropbox/Development/pinax-theme-foundation/pinax_theme_foundation/templates/theme_base.html",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/utils/context_processors.py",
		"/Users/christopherclarke/Dropbox/Development/civ_monitor/civ_monitor/apps/utils/views.py",
		"/Users/christopherclarke/Library/Application Support/Sublime Text 2/Packages/Python PEP8 Autoformat/pep8_autoformat.sublime-settings",
		"/Users/christopherclarke/Library/Application Support/Sublime Text 2/Packages/User/pep8_autoformat.sublime-settings",
		"/Users/christopherclarke/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/admin/site_base.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/fabfile.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/deploy/nginx_prod.conf",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/glossary/term_detail.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/urls.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/news/urls.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/_navbar.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/_sitemap.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/banner_base.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/deploy/local_settings_tmpl.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/workshops/models.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/_deploy.cfg",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/search/includes/_flatpage.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/search/includes/_article.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/contact_us/urls.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/search/includes/_workshop.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/search/includes/_glossary.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/news/models.py",
		"/Users/christopherclarke/Dropbox/Development/django-glossary/glossary/models.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/utils/urls.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/contact_us/forms.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/contact_us/views.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/static/css/site_styles.css",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/fixtures/initial_data.json",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/news/managers.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/news/markdown_parser.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/news/forms.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/news/views.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/settings.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/scripts/fixnews_dates.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/utils/markdown_parser.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/utils/admin.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/search/search.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/markitup/preview.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/flatpages/default.html.orig",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/flatpages/default.html",
		"/Users/christopherclarke/Dropbox/Development/django-glossary/MANIFEST.in",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/static/humans.txt",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/local_settings.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/utils/models.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/static/robots.txt",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/site_base.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/deploy/nginx.conf",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/national-hiv.sublime-project",
		"/Users/christopherclarke/Dropbox/Development/chrisdev_ops/config_files/network_interfaces.tmpl",
		"/Users/christopherclarke/Dropbox/Development/chrisdev_ops/xibalba_db",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/glossary/_letter_index.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/500.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/requirements/project.txt",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/search_sites.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/_topbar.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/workshops/root.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/news/templatetags/news_tags.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/workshops/workshop_detail.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/workshops/workshop_list.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/workshops/views.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/workshops/__init__.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/workshops/urls.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/news/root.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/workshops/admin.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/news/admin.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/news/article_list.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/requirements/base.txt",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/news/article_detail.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/workshops/tests.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/news/feeds.py",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/news/section_list.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/news/section_detail.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/apps/photos/templatetags/photo_tags.py",
		"/Users/christopherclarke/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/news/article_archive_year.html",
		"/Users/christopherclarke/Dropbox/Development/national_hiv_site/templates/news/article_archive_month.html"
	],
	"find":
	{
		"height": 88.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"  ",
			"')\n",
			"tt_value_redeemed_individuals",
			"positiion",
			"first_name",
			"OfficerDirector",
			"row",
			")\n",
			"fax",
			"first_name",
			"address_1",
			"ServiceManager",
			"InternationalClassification",
			" InternationalClassifica",
			"FundScheme",
			"LegalStatus",
			"img",
			"object",
			"yourproject",
			"'\n",
			"emal",
			"legacy_id",
			"notes",
			"open_ended",
			"legal",
			"fund_classification",
			"registration_date",
			"fund_scheme",
			"currency",
			"country",
			"description",
			"symbol",
			"issuer",
			"debug_mode",
			"list",
			"mainContent",
			"li",
			"aero",
			"25",
			"cusine",
			"apt get",
			"text_normalize",
			"url",
			"settings",
			" \n",
			"article",
			"photo",
			"post",
			" .",
			"post"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "apps/funds/models/funds.py",
					"settings":
					{
						"buffer_size": 3597,
						"regions":
						{
						},
						"selection":
						[
							[
								105,
								148
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 982.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "apps/funds/models/fund_data.py",
					"settings":
					{
						"buffer_size": 8350,
						"regions":
						{
						},
						"selection":
						[
							[
								196,
								196
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "apps/funds/models/fund_management.py",
					"settings":
					{
						"buffer_size": 4012,
						"regions":
						{
						},
						"selection":
						[
							[
								2440,
								2440
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 332.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "apps/funds/models/__init__.py",
					"settings":
					{
						"buffer_size": 77,
						"regions":
						{
						},
						"selection":
						[
							[
								76,
								76
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "apps/funds/admin.py",
					"settings":
					{
						"buffer_size": 7455,
						"regions":
						{
						},
						"selection":
						[
							[
								7454,
								7454
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "settings/local.py",
					"settings":
					{
						"buffer_size": 1762,
						"regions":
						{
						},
						"selection":
						[
							[
								1426,
								1426
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 163.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 6,
					"file": "/Users/christopherclarke/Dropbox/Development/civ_monitor_legacy/datasub/loader.py",
					"settings":
					{
						"buffer_size": 6842,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 452.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/Users/christopherclarke/Dropbox/Development/civ_monitor_legacy/core/models.py",
					"settings":
					{
						"buffer_size": 40979,
						"regions":
						{
						},
						"selection":
						[
							[
								15823,
								15879
							]
						],
						"settings":
						{
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 4.0,
						"translation.y": 4298.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 32.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.207286948123,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 26.0
	},
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 304.0,
	"status_bar_visible": true
}
